## class(flm)<-"lm"
return(flm)
}
lm.test<-linear_model(Sepal.Length ~., iris)
lm.test
summary(lm.test)
class(lm.test)<-"lm"
summary(lm.test)
summary(lm1)
linear_model <- function(formula, data) {
mm<-model.matrix(formula,data)
mf<-model.frame(formula, data)
y<-mf[as.integer(row.names(mm)),1]
QR<-qr(mm)
##coefficients
b<-qr.coef(QR,y)
##lm.object
flm<-list()
##residuals
mm2<-mm[,!is.na(b)]
b2<-b[!is.na(b)]
residuals<-as.vector(y-mm2%*%b2)
##effects
effects<-qr.qty(QR,y)
## rank   the rank of design matrix
rank<-QR$rank
##fitted.values
fitted.values<-as.vector(mm2%*%b2)
##assign
assign<-attr(QR$qr,"assign")
##qr  QR  qr qraux pivot  tol rank
qr<-QR
##df.residual
df.residual<-dim(mm2)[1]-dim(mm2)[2]
##contrasts
contrasts<-attr(QR$qr,"contrasts")
##xlevels
xlevels<-.getXlevels(terms(formula,data=data),m=mf)
##call
call = match.call(lm,call("lm",formula=formula))
##terms
terms<-terms(formula,data=data)
##model
model<-mf[as.integer(row.names(mm)),]
flm <- list(coefficients = b,
residuals=residuals,
effects=effects,
rank=rank,
fitted.values=fitted.values,
assign=assign,
qr=qr,
df.residual=df.residual,
contrasts=contrasts,
xlevels=xlevels,
call=call,
terms=terms,
model=model)
class(flm)<-"lm"
return(flm)
}
lm.test<-linear_model(Sepal.Length ~., iris)
lm.test
summary(lm.test)
lm.test2<-linear_model(y ~., lm_patho)
lm.test2
summary(lm.test2)
summary(lm2)
unclass(lm.test2)
qr.resid(QR2,y1)
m1<-model.matrix(y ~., lm_patho)
mf1<-model.frame(y ~., lm_patho)
y1<-mf[as.integer(row.names(m1)),1]
QR1<-qr(m1)
m1<-model.matrix(y ~., lm_patho)
mf1<-model.frame(y ~., lm_patho)
y1<-mf1[as.integer(row.names(m1)),1]
QR1<-qr(m1)
qr.resid(QR1,y1)
?match.call
?call
cl <- call("round", 10.5)
is.call(cl) # TRUE
cl
quote(round(10.5)
)
match.call(lm,call("lm",formula=Sepal.Length ~., iris,data=quote(iris)))
match.call(lm,call("lm",formula=Sepal.Length ~., iris,data=iris))
call("lm",formula=formula,data=quote(data))
call("lm",formula=Sepal.Length ~.,data=quote(iris))
linear_model <- function(formula, data) {
mm<-model.matrix(formula,data)
mf<-model.frame(formula, data)
y<-mf[as.integer(row.names(mm)),1]
QR<-qr(mm)
##coefficients
b<-qr.coef(QR,y)
##lm.object
flm<-list()
##residuals
mm2<-mm[,!is.na(b)]
b2<-b[!is.na(b)]
residuals<-as.vector(y-mm2%*%b2)
##effects
effects<-qr.qty(QR,y)
## rank   the rank of design matrix
rank<-QR$rank
##fitted.values
fitted.values<-as.vector(mm2%*%b2)
##assign
assign<-attr(QR$qr,"assign")
##qr  QR  qr qraux pivot  tol rank
qr<-QR
##df.residual
df.residual<-dim(mm2)[1]-dim(mm2)[2]
##contrasts
contrasts<-attr(QR$qr,"contrasts")
##xlevels
xlevels<-.getXlevels(terms(formula,data=data),m=mf)
##call
call = match.call()
##terms
terms<-terms(formula,data=data)
##model
model<-mf[as.integer(row.names(mm)),]
flm <- list(coefficients = b,
residuals=residuals,
effects=effects,
rank=rank,
fitted.values=fitted.values,
assign=assign,
qr=qr,
df.residual=df.residual,
contrasts=contrasts,
xlevels=xlevels,
call=call,
terms=terms,
model=model)
class(flm)<-"lm"
return(flm)
}
lm.test<-linear_model(Sepal.Length ~., iris)
lm.test
summary(lm.test)
a<-c(120,140, 180,130,110,90,120,140,100,130)
mean(a)
?ttest
t.test
?t.test
t.test(a,mu = 120,  conf.level = 0.95)
t.test(a,mu = 120, alternative ="less", conf.level = 0.95)
t.test(a,mu = 120, alternative ="greater", conf.level = 0.95)
t.test(a,mu = 140, conf.level = 0.95)
?TDist
pt(0.67,8)
dt(0.67,8)
qt(0.5234,8)
qt(0.5234,10)
qt(0.5234,1)
qt(0.025,1)
qt(0.025,8)
qt(0.975,8)
qt(0.9191,8)
qt(0.9191,1)
getwd()
?read.table
library(readxl)
Framingham_data_example <- read_excel("~/Documents/file/yale/2018 fall/623/Data Sets/Framingham_data_example.xlsx")
View(Framingham_data_example)
summary(Framingham_data_example$TOTCHOL)
max(Framingham_data_example,2)
max(Framingham_data_example)
max(Framingham_data_example$TOTCHOL,2)
max(Framingham_data_example$TOTCHOL,2,rm.na=T)
max(Framingham_data_example$TOTCHOL,2,na.rm = =T)
max(Framingham_data_example$TOTCHOL,2,na.rm = T)
?max
sum(Framingham_data_example$TOTCHOL>400)
sum(Framingham_data_example$TOTCHOL[!is.na(Framingham_data_example$TOTCHOL)],>400)
sum(Framingham_data_example$TOTCHOL[!is.na(Framingham_data_example$TOTCHOL)]>400)
sum(Framingham_data_example$TOTCHOL[!is.na(Framingham_data_example$TOTCHOL)]>500)
Framingham_data_example[Framingham_data_example$TOTCHOL[!is.na(Framingham_data_example$TOTCHOL)]>500,]
Framingham_data_example[Framingham_data_example$TOTCHOL[!is.na(Framingham_data_example$TOTCHOL)]>500&(!is.na(Framingham_data_example$TOTCHOL)),]
b<-sort(Framingham_data_example$TOTCHOL)
head(b)
tail(b)
which(Framingham_data_example$Framingham_data_example==600)
which(Framingham_data_example$TOTCHOL==600)
which(Framingham_data_example$TOTCHOL==696)
new<-Framingham_data_example[-c(1157,3299),]
lm1<-lm(TOTCHOL= AGE+DIABP+HEARTRTE+SEX+BMI+ CIGPDAY+PREVCHD+PREVHYP,data=Framingham_data_example)
lm1<-lm(TOTCHOL~AGE+DIABP+HEARTRTE+SEX+BMI+ CIGPDAY+PREVCHD+PREVHYP,data=Framingham_data_example)
lm1
summary(lm1)
lm2<-lm(TOTCHOL~AGE+DIABP+HEARTRTE+SEX+BMI+ CIGPDAY+PREVCHD+PREVHYP,data=new)
summary(lm2)
lm3<-lm(TOTCHOL~AGE+DIABP+HEARTRTE+SEX+BMI+ CIGPDAY,data=new)
summary(lm3)
?predict()
?predict.lm()
length(predict.lm(lm3))
plot(predict.lm(lm3),new$TOTCHOL)
length(new$TOTCHOL)
plot(lm3$fitted.values,lm3$model[,1])
plot(lm3$fitted.values,lm3$model[,1],xlim=c(0,400))
plot(lm3$fitted.values,lm3$model[,1],xlim=c(0,400),ylim=c(0,400))
plot(lm3$fitted.values,lm3$model[,1],xlim=c(100,400),ylim=c(100,400))
library(readxl)
Framingham_data_example <- read_excel("~/Documents/file/yale/2018 fall/623/Data Sets/Framingham_data_example.xlsx")
View(Framingham_data_example)
summary(Framingham_data_example$CIGPDAY)
hist(Framingham_data_example$CIGPDAY)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]>20)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]<5)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]>15)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]>17)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]>18)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]>19)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]>20)
sum(Framingham_data_example$CIGPDAY[!is.na(Framingham_data_example$CIGPDAY)]>=20)
summary(Framingham_data_example$GLUCOSE)
hit(Framingham_data_example$GLUCOSE)
hist(Framingham_data_example$GLUCOSE)
sum(Framingham_data_example$GLUCOSE[!is.na(Framingham_data_example$GLUCISE)]>=300)
sum(Framingham_data_example$GLUCOSE[!is.na(Framingham_data_example$GLUCOSE)]>=300)
install.packages("MCMCpack")
library(MCMCpack)
library(MASS)
library(coda)
library(MCMCpack)
?rdirichlet
test<-rdirichlet(500,c(1,1,1))
test<-rdirichlet(500,c(1,1,1))
head(test)
rdirichlet(1,c(38,107,358))[1]
rdirichlet(1,c(38,107,358))
rdirichlet(1,c(38,107,358))[1]
means<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))
for(j in 1:10000){
y<-c(y,rdirichlet(1,c(38,107,358))[1])
means[j]<-mean(y)}
plot(means,type="l")
abline(68/45,0,col="blue",lwd=2)
mean[j]
means<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))
for(j in 1:100000){
y<-c(y,rdirichlet(1,c(38,107,358))[1])
means[j]<-mean(y)}
plot(means,type="l")
abline(68/45,0,col="blue",lwd=2)
means[j]
means[j-1]
abline(0.076,0,col="blue",lwd=2)
abline(0.076,0,col="blue",lwd=3)
vars<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))
for(j in 1:100000){
y<-c(y,rdirichlet(1,c(38,107,358))[1])
vars[j]<-var(y)}
vars<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))
for(j in 1:100000){
y<-c(y,rdirichlet(1,c(38,107,358))[1])
vars[j]<-var(y)}
plot(vars,type="l")
abline(0.000139,0,col="blue",lwd=1)
abline(0.000139,0,col="blue",lwd=1)
vars[j]
covs<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))
for(j in 1:100000){
y1<-c(y1,rdirichlet(1,c(38,107,358))[1])
y2<-c(y2,rdirichlet(1,c(38,107,358))[2])
covs[j]<-cov(y1,y2)}
plot(covs,type="l")
covs<-rep(0,times=100000)
y1<-rdirichlet(1,c(38,107,358))[1]
y2<-c(y1,rdirichlet(1,c(38,107,358))[2])
for(j in 1:100000){
y1<-c(y1,rdirichlet(1,c(38,107,358))[1])
y2<-c(y2,rdirichlet(1,c(38,107,358))[2])
covs[j]<-cov(y1,y2)}
plot(covs,type="l")
covs<-rep(0,times=100000)
y1<-rdirichlet(1,c(38,107,358))[1]
y2<-rdirichlet(1,c(38,107,358))[2]
for(j in 1:100000){
y1<-c(y1,rdirichlet(1,c(38,107,358))[1])
y2<-c(y2,rdirichlet(1,c(38,107,358))[2])
covs[j]<-cov(y1,y2)}
plot(covs,type="l")
abline(-0.0000319,0,col="blue",lwd=2)
covs[j]
?cov
y<-rdirichlet(1,c(38,107,358))[c(1,2)]
y
y<-rbind(y,rdirichlet(1,c(38,107,358))[c(1,2)])
y
covs[j]<-cov(y[,1],y[,2])
covs[j]
covs<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))[c(1,2)]
for(j in 1:100000){
y<-rbind(y,rdirichlet(1,c(38,107,358))[c(1,2)])
covs[j]<-cov(y[,1],y[,2])}
plot(covs,type="l")
covs[j]
abline(-0.0000319,0,col="blue",lwd=2)
rm(y)
rm(y1)
rm(y2)
means2<-rep(0,times=100000)
vars2<-rep(0,times=100000)
low<-rep(0,times=100000)
up<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))
y<-rbind(y,rdirichlet(1,c(38,107,358)))
y
means[j]=mean(y[,1]^(y[,2])/y[,3])
means[j]
vars[j]=var(y[,1]^(y[,2])/y[,3])
low[j]=quantile(y[,1]^(y[,2])/y[,3],0.025)
up[j]=quantile(y[,1]^(y[,2])/y[,3],0.975)}
up[j]=quantile(y[,1]^(y[,2])/y[,3],0.975)
low[j]
up[j]
means2<-rep(0,times=100000)
vars2<-rep(0,times=100000)
low<-rep(0,times=100000)
up<-rep(0,times=100000)
y<-rdirichlet(1,c(38,107,358))
for(j in 1:100000){
y<-rbind(y,rdirichlet(1,c(38,107,358)))
means[j]=mean(y[,1]^(y[,2])/y[,3])
vars[j]=var(y[,1]^(y[,2])/y[,3])
low[j]=quantile(y[,1]^(y[,2])/y[,3],0.025)
up[j]=quantile(y[,1]^(y[,2])/y[,3],0.975)}
rm(y)
y0<-as.maxtrix(rep(0, times=100000*3),nrow=100000 )
y0<-matrix(rep(0, times=100000*3),nrow=100000 )
dim(y0)
y<-rdirichlet(1,c(38,107,358))
y0[j,]<- rmultinom(1, 500, y)
y0[j,]
y0<-matrix(rep(0, times=100000*3),nrow=100000 )
for(j in 1:100000){
y<-rdirichlet(1,c(38,107,358))
y0[j,]<- rmultinom(1, 500, y)
}
hist(y0[,1])
hist(y0[,2])
hist(y0[,3])
library(coda,MASS,MCMCpack)
library(MCMCpack)
knitr::opts_chunk$set(echo = TRUE)
y<-rdirichlet(100000,c(38,107,358))
dim(y)
Ep1<-mean(y[,1])
Ep1
Ep2<-mean(y[,2])
Ep2
P<-rdirichlet(100000,c(38,107,358))
E_p1<-mean(P[,1])
Var_p1<-var(P[,1])
E_p2<-mean(P[,2])
Var_p2<-var(P[,2])
E_p3<-mean(P[,3])
Var_p3<-var(P[,3])
cov_p12<-cov(P[,1],P[,2])
cov_p23<-cov(P[,2],P[,3])
cov_p13<-cov(P[,1],P[,3])
E_p1
Var_p1
E_p2
Var_p2
E_p3
Var_p3
cov_p12
cov_p23
cov_p13
c(E_p1,E_p2)
a<-c(E_p1,E_p2)
rownames(a)<-("Ep1","Eps")
rownames(a)<-c("Ep1","Eps")
names(a)<-c("Ep1","Eps")
a
quantity<-c(E_p1,E_p2,E_p3,Var_p1,Var_p2,Var_p3,cov_p12,cov_p23,cov_p13)
names(quantity)<-c('E_p1','E_p2','E_p3','Var_p1','Var_p2','Var_p3','cov_p12','cov_p23','cov_p13')
quantity
se_p1<-sqrt(Var_p1/100000)
se_p1
se_p1<-sqrt(Var_p1/100000)
se_p2<-sqrt(Var_p2/100000)
se_p3<-sqrt(Var_p3/100000)
se<-c(se_p1,se_p2,se_p3)
names(se)<-c('se_p1','se_p2','se_p3')
se
MC_mean=mean(P[,1]^(P[,2])/P[,3])
MC_mean
MC_var=var(P[,1]^(P[,2])/P[,3])
MC_mean
MC_var
MC_interval=quantile(P[,1]^(P[,2])/P[,3],C(0.025,0.975))
MC_interval=quantile(P[,1]^(P[,2])/P[,3],c(0.025,0.975))
MC_interval
MC_approximate<-c(MC_mean,MC_var,MC_interval)
MC_approximate
names(MC_approximate)<-c('mean','var','interval')
MC_approximate
names(MC_approximate)<-c('mean','var','l95','u95')
MC_approximate
for(i in 1:100000){
y0[i,]<- rmultinom(1, 500, P[i,])
}
hist(y0[,1])
hist(y0[,2])
hist(y0[,3])
y0<-matrix(rep(0, times=100000*3),nrow=100000 )
for(i in 1:100000){
y0[i,]<- rmultinom(1, 500, P[i,])
}
hist(y0[,1])
hist(y0[,2])
hist(y0[,3])
?hist
hist(y0[,1],main="Histogram of Y01")
hist(y0[,1],main="Histogram of Y01")hist(y0[,1],main="Histogram of Y01")hist(y0[,1],main="Histogram of Y01")
hist(y0[,1],main="Histogram of Y01")
hist(y0[,1],main="Histogram of Y01")
hist(y0[,2],main="Histogram of Y02",xlab="YO2")
y0<-matrix(rep(0, times=100000*3),nrow=100000 )
for(i in 1:100000){
y0[i,]<- rmultinom(1, 500, P[i,])
}
hist(y0[,1],main="Histogram of Y01",xlab="Y01")
hist(y0[,2],main="Histogram of Y02",xlab="YO2")
hist(y0[,1],main="Histogram of Y01",xlab="Y01")
hist(y0[,2],main="Histogram of Y02",xlab="Y02")
hist(y0[,3],main="Histogram of Y03",xlab="Y03")
ln(2)
log(2)
ridge_test <- read.csv("ridge_test.csv",header=T)
save(ridge_test, file = "../data/ridge_test.rda")
getwd()
setwd(/Users/shiyingwang/desktop/bis557/data-raw)
setwd("/Users/shiyingwang/desktop/bis557/data-raw")
ridge_test <- read.csv("ridge_test.csv",header=T)
save(ridge_test, file = "../data/ridge_test.rda")
ridge_train <- read.csv("ridge_train.csv",header=T)
save(ridge_train, file = "../data/ridge_train.rda")
dim(ridge_train)
dim(ridge_test)
head(ridge_test)
head(ridge_train)
library(devtools)
getwd()
setwd("/Users/shiyingwang/Desktop/bis557")
documents()
document()
document()
document()
ridge_reg <- function(formula, data,lambda) {
mm<-model.matrix(formula,data)
mf<-model.frame(formula, data)
y<-mf[,1]
SVD<-svd(m)
U<-SVD$u
V<-SVD$v
svals<-SVD$d
D<-diag(svals/(svals^2+lambda))
beta<-V %*% D %*% t(U) %*% y
names(beta)<-colnames(m)
ret<-list(coefficients=beta,lambda=lambda,call=match.call())
class(ret)<-"ridge_reg"
ret}
ridge_reg(y ~., ridge_train)
ridge_reg(y ~., ridge_train,1.2)
ridge_reg <- function(formula, data,lambda) {
mm<-model.matrix(formula,data)
mf<-model.frame(formula, data)
y<-mf[,1]
SVD<-svd(mm)
U<-SVD$u
V<-SVD$v
svals<-SVD$d
D<-diag(svals/(svals^2+lambda))
beta<-V %*% D %*% t(U) %*% y
names(beta)<-colnames(mm)
ret<-list(coefficients=beta,lambda=lambda,call=match.call())
class(ret)<-"ridge_reg"
ret}
ridge_reg(y ~., ridge_train,1.2)
ridge_reg <- function(formula, data,lambda) {
mm<-model.matrix(formula,data)
mf<-model.frame(formula, data)
y<-mf[,1]
SVD<-svd(mm)
U<-SVD$u
V<-SVD$v
svals<-SVD$d
D<-diag(svals/(svals^2+lambda))
beta<-V %*% D %*% t(U) %*% y
rownames(beta)<-colnames(mm)
ret<-list(coefficients=beta,lambda=lambda,call=match.call())
class(ret)<-"ridge_reg"
ret}
ridge_reg(y ~., ridge_train,1.2)
ridge_reg(y ~., ridge_train)
ridge_reg(y ~., ridge_train,0)
ridge_reg(y ~., ridge_train, lambda = 1.2121212)
MASS::lm.ridge(y ~., ridge_train, lambda = 1.2121212)
